import asyncio
import os
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(commands=["start"])
async def start_handler(message: Message):
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é.")
    await message.answer("üåü –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ—Å–º–æ–ë–æ—Ç. –•–æ—á–µ—à—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ? –ù–∞–ø–∏—à–∏ /predict")

@dp.message(commands=["predict"])
async def predict_handler(message: Message):
    predictions = [
        "‚ú® –°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!",
        "üöÄ –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤–æ–µ!",
        "üåå –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∏—Ç —Ç–µ–±–µ —Å—é—Ä–ø—Ä–∏–∑.",
        "üå† –¢—ã ‚Äî –º–∞–≥–Ω–∏—Ç –¥–ª—è —É–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è.",
        "ü™ê –í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ –≤–µ—Ä–∏—à—å –≤ —Å–µ–±—è!"
    ]
    prediction = random.choice(predictions)
    logger.info(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {message.from_user.id}: {prediction}")
    await message.answer(prediction)

async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
